==========Docker Hub==========
# pull image
- docker pull ubuntu:16.04

# remove image
- docker image rm ubuntu:16.04

# run container from image
- docker run ubuntu

# start a stopped container
- docker start afd21

# stop container
- docker stop afd21

# create container from image with detail
- docker run -it --name 'ABC' -h centos1 centos:latest

# remove container
- docker rm asd21

# back to running container
- docker attach asd21
==========Save image==========
# save container to image
- docker commit test_ubuntu test_ubuntu:v1

# save image to file
- docker save --output image.tar id
- docker save --output test_ubuntu.tar 5f2

# gen image from file
- docker load -i image.tar

# named an image
- docker tag 5f2 newimage:version

==========Sharing data==========
# sharing data between a folder in host and container folder
- docker run -it -v /home/admin/Desktop/Tutorials/test:/home/dulieu --name my_container 5f2

# create volume
- docker volume create v1

# delete volume
- docker volume rm v1

# list volume
- docker volume ls

# check a volume 
- docker volume inspect v1

# container 2 using volume like container 1
- docker run -it --name C2 --volumes-from C1 ubuntu:latest

# mount a volume to a folder in docker
- docker run -it --name C1 --mount source=v1,target=/home/dulieu2 ubuntu:latest

# create a volume from a file in host(not use --mount for connect to container, use -v instead)
- docker volume create --opt device=/home/admin/Desktop/Tutorials/test --opt type=none --opt o=bind Volume2

- docker run -it -v Volume2:/home/dulieu2 ubuntu:latest

==========Docker Network==========
# list network
- docker network ls

# check a bridge
- docker network inspect bridge

- docker inspect B1

- docker run -it --name B2 -p 8888:80 busybox

- docker network create --driver bridge network1

- docker network rm network1

- docker run -it --name B3 --network mynetwork busybox

- docker run -it --name B3 --network mynetwork -p 9999:80 busybox

# attach running container to a network
- docker network connect bridge B3


==========Create full service ==========
docker pull php:7.3-fpm

docker network create --driver bridge www-net

docker run -d --name c-php -h php -v /home/admin/Desktop/Tutorials/mycode:/home/mycode --network www-net php:7.3-fpm

docker exec -it c-php bash

docker run --rm -v /home/admin/Desktop/Tutorials/mycode:/home/mycode/ httpd cp /usr/local/apache2/conf/httpd.conf /home/mycode

docker run --network www-net --name c-httpd -h httpd -p 9999:80 -p 443:443 -v /home/admin/Desktop/Tutorials/mycode:/home/mycode/ -v /home/admin/Desktop/Tutorials/mycode/httpd.conf:/usr/local/apache2/conf/httpd.conf httpd

# environment variable
docker run -it --rm -e BIEN1=VALUE1 -e BIEN2=VALUE2 busybox

docker pull mysql 

docker run --rm -v /home/admin/Desktop/Tutorials/mycode/:/home/mycode/ mysql:latest cp /etc/my.cnf /home/mycode/ 

docker run -e MYSQL_ROOT_PASSWORD=abc123 -v /home/admin/Desktop/Tutorials/mycode/my.cnf:/etc/my.cnf -v /home/admin/Desktop/Tutorials/mycode/db:/var/lib/mysql --name c-mysql mysql:latest

==========Check docker ==========
- docker image history id 

- docker inspect id

- docker diff container_name

- docker logs --tail 10 cont_name

- docker logs -f c-php

==========Check docker ==========
docker run -it --name cent centos:latest
yum update -y
yum install httpd httpd-tools -y 
yum install vim -y 
yum install epel-release -y
yum update -y
yum install htop -y 

docker cp /home/admin/Desktop/Tutorials/mycode/myimage/test.html cent:/var/www/html/

docker commit cent myimage:v1
==========Create dockerfile ==========
docker build -t myimage:v1 -f Dockerfile .

docker run -p 6789:80 myimage:v1